"nottingham,GB",
"oldham,GB",
"orkney islands,GB",
"oxford,GB",
"plymouth,GB",
"portsmouth,GB",
"preston,GB",
"reading,GB",
"rochdale,GB",
"rotherham,GB",
"salford,GB",
"sheffield,GB",
"south shields,GB",
"southampton,GB",
"southend-on-sea,GB",
"southport,GB",
"st helens,GB",
"stockport,GB",
"stoke-on-trent,GB",
"sunderland,GB",
"swansea,GB",
"tynemouth,GB",
"wakefield,GB",
"wallasey,GB",
"walsall,GB",
"warley,GB",
"warrington,GB",
"west bromich,GB",
"west hartlepool,GB",
"wigan,GB",
"wolverhampton,GB",
"worcester,GB",
"york,GB")
locations <- ldply(address, function(x) geoCode(x))
locations5<-data.frame(locations)
names(locations5) <- c("lat","lon","location_type", "forAddress")
write.table (locations5, "locations", sep=",")
setwd("~/Desktop")
"warrington,GB",
write.table (locations5, "locations", sep=",")
# image analysis in R
# source("http://bioconductor.org/biocLite.R")
# biocLite()
# biocLite("EBImage")
library(EBImage)
setwd("/Users/markcherrimacbook/Desktop/image_analysis/")
Image <- readImage("green.jpg")
print(Image)
display(Image)
dim(Image)
y<-ncol(Image)
x<-nrow(Image)
array<-imageData(Image)
df<-data.frame(array)
# variables are y*3
red<-subset(df, select=X1:X2736)
green<-subset(df, select=X2737:X5472)
blue<-subset(df, select=X5473:X8208)
## run test on top line... should all be different levels of blue
RGBtest<-c(red[1,1], green[1,1], blue[1,1])
RGBtest<-RGBtest*255
x <- 2736-(sample(1:2736, 1))
y <- 5472-(sample(2737:5472, 1))
z <- 8208-(sample(5473:8208, 1))
RGBtest2<-c(red[x, 1], green[y,1], blue[z, 1])
RGBtest2<-RGBtest2*255
RGBtest2
## check with http://www.rapidtables.com/web/color/RGB_Color.htm
## seems about right
## how do we get number of pixels that are "green" or "blue"
## is there a list of RGB values that correspond to "green"
## or do we need to so some kind of semi-supervised machine learning?
library(devtools)
install_github("environmentalinformatics-marburg/Rsenal")
install_github("environmentalinformatics-marburg/Rsenal")
library(Rsenal)
install.packages("library(Rsenal)")
install.packages("Rsenal")
install.packages("Rsenal")
install.packages("Rsenal")
install_github("environmentalinformatics-marburg/Rsenal")
update.packages(checkBuilt=TRUE, ask=FALSE)
install_github("environmentalinformatics-marburg/Rsenal")
install.packages("Rcpp", type = "source")
install.packages("Rcpp", type = "source")
install.packages("Rcpp", type = "source")
install.packages("Rcpp", type = "source")
install.packages("Rcpp", type = "source")
install.packages("Rcpp", type = "source")
library(devtools)
install_github("environmentalinformatics-marburg/Rsenal")
# R image with dev libs &  packages for GIS
# =========================================
FROM rocker/hadleyverse
MAINTAINER "Maarten Hermans" maarten@mhermans.net
# apt-get packages
# ----------------
RUN apt-get update && apt-get install -y --no-install-recommends \
tk-dev \
libgdal-dev \
libimage-exiftool-perl \
libproj-dev \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/ \
&& rm -rf /tmp/downloaded_packages/ /tmp/*.rds
# R packages
# ----------
RUN install2.r --error --deps TRUE \
rgdal \
lubridate \
plotKML \
&& rm -rf /tmp/downloaded_packages/
# R Github repo's
# ----------------
RUN installGithub.r rstudio/leaflet \
&& rm -rf /tmp/downloaded_packages/
WORKDIR /home/rstudio/
# R image with dev libs &  packages for GIS
# =========================================
FROM rocker/hadleyverse
MAINTAINER "Maarten Hermans" maarten@mhermans.net
# apt-get packages
# ----------------
RUN apt-get update && apt-get install -y --no-install-recommends \
tk-dev \
libgdal-dev \
libimage-exiftool-perl \
libproj-dev \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/ \
&& rm -rf /tmp/downloaded_packages/ /tmp/*.rds
# R packages
# ----------
RUN install2.r --error --deps TRUE \
rgdal \
lubridate \
plotKML \
&& rm -rf /tmp/downloaded_packages/
# R Github repo's
# ----------------
RUN installGithub.r rstudio/leaflet \
&& rm -rf /tmp/downloaded_packages/
WORKDIR /home/rstudio/
install.packages(c('rgdal', 'leaflet', 'sp', 'lubridate', 'ggplot2'))
install.packages(c('rgdal', 'leaflet', 'sp', 'lubridate', 'ggplot2'))
install.packages(c("rgdal", "leaflet", "sp", "lubridate", "ggplot2"))
install.packages(c("rgdal", "leaflet", "sp", "lubridate", "ggplot2"))
library(rgdal)    # GDAL bindings for loading GPX-data
library(sp)       # spatial operations library
library(lubridate)# datetime-operatings, here to convert from strings
library(ggplot2)  # general plotting library
library(leaflet)  # for generating interactive Javascript maps
library(rgdal)    # GDAL bindings for loading GPX-data
library(sp)       # spatial operations library
library(lubridate)# datetime-operatings, here to convert from strings
library(ggplot2)  # general plotting library
getwd()
GPX_file <- 'Walkmeter-Walk-20160404-0822.gpx'
wp <- readOGR(GPX_file, layer = "track_points")
track <- readOGR(GPX_file, layer = "tracks", verbose = FALSE)
leaflet() %>% addTiles() %>% addPolylines(data=track)
GPX_file <- 'Walkmeter-Walk-20160405-0746.gpx'
wp <- readOGR(GPX_file, layer = "track_points")
track <- readOGR(GPX_file, layer = "tracks", verbose = FALSE)
leaflet() %>% addTiles() %>% addPolylines(data=track)
# LOAD EM UP
# loading the required packages (format)
library(ggplot2)
library(ggmap)
library(reshape2)
# Add required libraries (interpolate)
library(sp)
library(raster)
library(gstat)
# Add required libraries (Spatial statistics)
require(raster)
require(sp)
require(rgdal)
library(maptools)
# GET UV DATA
setwd("~/Documents/JAXA_data/JAXA_daily/data")
# download file
multiUVBdownload <-function(sat, fromDate, toDate, UVRtype){
days<-seq(from=as.Date(fromDate), to=as.Date(toDate),by='days')
days<-gsub("-", "", days)
for (i in seq_along(days) )
{
FTP <- paste0("ftp://apollo.eorc.jaxa.jp/pub/jasmes/global/par/repro_v6//", UVRtype, "/", substring((days[i]), 1,4),"/")
file<-paste0(sat, "02SSH_A", (days[i]) , "Av1_v601_7200_3601_",UVRtype,"__8b.gz")
searchFTP<-paste0(FTP, sat, "02SSH_A", (days[i]), "Av1_v601_7200_3601_",UVRtype,"__8b.gz")
download.file(searchFTP, destfile=paste0(getwd(), "/", file))
}
}
###########################################################
multiUVBdownload("MYD", "2006-06-20", "2006-06-21", "uvb")
###########################################################
library(ggplot2)
library(ggmap)
library(reshape2)
# Add required libraries (interpolate)
library(sp)
library(raster)
library(gstat)
# Add required libraries (Spatial statistics)
require(raster)
require(sp)
require(rgdal)
library(maptools)
install.packages("ggmap")
library(ggplot2)
library(ggmap)
library(reshape2)
# Add required libraries (interpolate)
library(sp)
library(raster)
library(gstat)
# Add required libraries (Spatial statistics)
require(raster)
require(sp)
require(rgdal)
library(maptools)
install.packages("sp")
install.packages("sp")
install.packages("sp")
library(ggplot2)
library(ggmap)
library(reshape2)
# Add required libraries (interpolate)
library(sp)
library(raster)
library(gstat)
# Add required libraries (Spatial statistics)
require(raster)
require(sp)
require(rgdal)
library(maptools)
install.packages("gstat")
install.packages("maptools")
library(ggplot2)
library(ggmap)
library(reshape2)
# Add required libraries (interpolate)
library(sp)
library(raster)
library(gstat)
# Add required libraries (Spatial statistics)
require(raster)
require(sp)
require(rgdal)
library(maptools)
install.packages("gstat")
library(gstat)
library(sp)
library(raster)
library(gstat)
library(leaflet)  # for generating interactive Javascript maps
library(rgdal)    # GDAL bindings for loading GPX-data
library(sp)       # spatial operations library
library(lubridate)# datetime-operatings, here to convert from strings
library(ggplot2)  # general plotting library
GPX_file <- 'Walkmeter-Walk-20160405-0746.gpx'
wp <- readOGR(GPX_file, layer = "track_points")
track <- readOGR(GPX_file, layer = "tracks", verbose = FALSE)
leaflet() %>% addTiles() %>% addPolylines(data=track)
shiny::runApp('~/Google Drive/Geocode_comparison')
agreo("lasy", "lasy 1 2 3")
agrep("lasy", "lasy 1 2 3")
agrep("lasy", "1 2 3")
agrep("lasy", "lasy1 2 3")
agrep("lasy", "lasy3323231 2 3")
agrep("lasy", "lasty3323231 2 3")
agrep("lasy", "laaaay3323231 2 3")
agrep("lasy", "laaaay3323231 2 3", ignore.case=T, value=T, max.distance=0.1, useBytes = F)
agrep("lasy", "laasay3323231 2 3", ignore.case=T, value=T, max.distance=0.1, useBytes = F)
agrep("lasy", "laasy3323231 2 3", ignore.case=T, value=T, max.distance=0.1, useBytes = F)
agrep("lasy", c("laasy3323231 2 3", "LASY"), ignore.case=T, value=T, max.distance=0.1, useBytes = F)
agrep("lasy", c("laasy3323231 2 3", "LASY"), ignore.case=T, value=T, max.distance=0.99999, useBytes = F)
agrep("lasy", c("laasy3323231 2 3", "LASY"), ignore.case=T, value=T, max.distance=0.99999, useBytes = F)
agrep("lasy", c("laasy3323231 2 3", "LASY"), ignore.case=T, value=T, max.distance=9, useBytes = F)
install.packages("stringdist")
library(stringdist)
stringdist("ca", "abc")
stringdist("ca", "abcknlknknlk")
stringdist("39, Buckingham Avenue, East Molesey, Surrey", "Buckingham Avenue, West Molesey, Elmbridge, Surrey, South East, England, KT8 1SE, UNited Kingdom")
1456/60
UVI<-read.csv(file.choose())
View(UVI)
names(UVI)
UVI$DATE<-as.date(UVI$YYYYMMDD, "%Y%m%d"))
UVI$DATE<-as.date(UVI$YYYYMMDD, "%Y%m%d")
UVI$DATE<-as.Date(UVI$YYYYMMDD, "%Y%m%d")
View(UVI)
UVI$DATE<-as.Date(UVI$YYYYMMDD, "%Y/%m/%d")
UVI$DATE<-as.Date(UVI$YYYYMMDD, "%Y%M%D")
UVI$DATE<-as.Date(UVI$YYYYMMDD, "%Y%m%d")
names(UVI)
hist(UVI$UVI)
UVI$UVI_breaks[UVI$UVI<=2]<-1
UVI$UVI_breaks[UVI$UVI>=3 & UVI$UVI<=5]<-2
UVI$UVI_breaks[UVI$UVI>=6 & UVI$UVI<=7]<-3
UVI$UVI_breaks[UVI$UVI>=8 & UVI$UVI<=10]<-4
UVI$UVI_breaks[UVI$UVI>=11]<-5
hist(UVI$UVI_breaks)
UVI$UVI_breaks<-as.factor(UVI$UVI_breaks)
# UVI distribution per year
hist(UVI$UVI_breaks)
UVI$UVI_breaks<-as.factor(UVI$UVI_breaks)
hist(UVI$UVI_breaks)
barplot(UVI$UVI_breaks)
pie(UVI$UVI_breaks)
histogram(UVI$UVI_breaks)
hist(UVI$UVI_breaks)
UVI$UVI_breaks<-as.numeric(UVI$UVI_breaks)
hist(UVI$UVI_breaks)
install.packages("parallel")
data <- data.table(id =c(1:10000000),
value = rnorm(10000000), poll1=rnorm(10000000), poll2=rnorm(10000000))
library(forecast)
library(data.table)
library(parallel)
#create 10 sample series -not 1800, but you get the idea.
set.seed(1)
data <- data.table(id =c(1:10000000),
value = rnorm(10000000), poll1=rnorm(10000000), poll2=rnorm(10000000))
data<-NULL
install.packages("bigmemory")
install.packages("ff")
install.packages("HadoopStreaming")
install.packages("Rhipe")
library(Rhipe)
library(HadoopStreaming)
library(ff)
library(Rhipe)
install.packages("Rhipe")
install.packages("genderizeR")
library(genderizeR)
install.packages("genderizeR")
devtools::install_github("kalimu/genderizeR")
devtools::install_github("kalimu/genderizeR")
library(genderizeR)
devtools::install_github("kalimu/genderizeR")
devtools::install_github("leonawicz/mapmate")
library("RSelenium")
install.packages("RSelenium")
library("RSelenium")
startServer()
library("RSelenium")
startServer()
shiny::runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
rsconnect::showLogs(
`0`
)
rsconnect::showLogs()
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
addresses = paste0(addresses, ", Edinburgh, Scotland")
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
runApp('~/Downloads/creshwebmap/app')
shiny::runApp('1b47e0725c0a464fae91546890a52e07')
runApp('1b47e0725c0a464fae91546890a52e07')
shiny::runApp('~/Google Drive/creshwebmap/app')
runApp('1b47e0725c0a464fae91546890a52e07')
runApp('~/Google Drive/creshwebmap/app')
installed.packages()
installed.packages()[,"package"])]
installed.packages()[,"Package"])]
names(installed.packages())
(installed.packages()
)
(installed.packages()[, Packaged]
)
installed.packages()[, Packages]
installed.packages()[, "Packages"]
installed.packages()[, "Package"]
packages_to_install<-installed.packages()[, "Package"]
packages_to_install<-data.frame(installed.packages()[, "Package"])
packages_to_install
View(packages_to_install)
packages_to_install<-data.frame(Package=installed.packages()[, "Package"])
View(packages_to_install)
unlist(packages_to_install)
bl<-unlist(packages_to_install)
bl
print(bl)
bl<-installed.packages()[,"package"])]
installed.packages()[, "Package"]
packages<-installed.packages()[, "Package"]
packages
install.packages("xts", "yaml")
packagesstring<-paste("c(",packages, ",")
packagesstring
packagesstring<-paste("packages, ",")
)
)_QEK!P2om
[pe,]2l3
2@@
"""
""
packagesstring<-paste(packages, ",")
packagesstring<-paste("c(", paste(packages, ","))
packagesstring
packagesstring<-paste(packages, ",")
packagesstring
unlist(packagesstring)
paste0(packagesstring)
typeof(packagesstring)
paste0(packagesstring, collapse="")
packages<-installed.packages()[, "Package"]
packages
packagesstring<-paste(packages, collapse=",")
packagesstring
packagesstring<-paste(shQuote(packages), collapse=",")
packagesstring
packagesstring<-toString(shQuote(packages), collapse=",")
packagesstring
packagesstring<-toString(shQuote(packages), "\n", collapse=",")
packagesstring<-toString(shQuote(packages, "\n"), collapse=",")
tail(packagesstring)
packagesstring2<- paste0("c(", packagesstring, collapse="")
packagesstring2
packagesstring3<-noquote(packagesstring2)
packagesstring3
packagesstring2<- noquote(paste0("c(", toString(shQuote(installed.packages()[, "Package"]), collapse=","), collapse=""))
packagesstring<- noquote(paste0("c(", toString(shQuote(installed.packages()[, "Package"]), collapse=","), collapse=""))
packagesstring
3list.of.packages<-c('abind', 'AnnotationDbi')
list.of.packages<-c('abind', 'AnnotationDbi')
list.dirs()
list.of.packages
new.packages<- list.of.packages[!(list.of.packages %in% packagesstring)]
new.packages()
new.packages
new.packages<- list.of.packages[!(list.of.packages %in% packagesstring)]
new.packages
new.packages<- packagesstring[!(list.of.packages %in% packagesstring)]
new.packages
new.packages<- packagesstring[!(list.of.packages %in% packagesstring),]
packagesstring
packagesstring2<-  toString(shQuote(installed.packages()[, "Package"]), collapse=","))
packagesstring2<-  toString(shQuote(installed.packages()[, "Package"]), collapse=",")
packagesstring2
new.packages<- packagesstring[!(list.of.packages %in% packagesstring)]
newnew.packages<- packagesstring[!(list.of.packages %in% packagesstring2)]
newnew.packages
list.of.packages %in% packagesstring2
new.packages<- packagesstring[!(packagesstring2 %in% list.of.packages)]
new.packages()
new.packages
new.packages<- packagesstring2[!(packagesstring2 %in% list.of.packages)]
new.packages()
new.packages
packagesstring2 %in% list.of.packages
packagesstring2<-  installed.packages()[, "Package"])
packagesstring2<-  installed.packages()[, "Package"]
packagesstring2
list.of.packages
packagesstring2 %in% list.of.packages
packagesstring2[!(packagesstring2 %in% list.of.packages)]
packagesstring2
packagesstring<- installed.packages()[, "Package"]
packagesstring
list.of.packages<-"XML"
new.packages<- packagesstring[!(packagesstring %in% list.of.packages)]
new.packages
if(length(new.packages)) install.packages(new.packages)
packagesstring<- installed.packages()[, "Package"]
packagesstring
ls
getwd()
saveRDS(packagesstring, "packagestring.RDS")
packagesstring<-readRDS("packagestring.RDS")
packagesstring
install.packages(packagestring)
packagesstring
packagesstring<- noquote(paste0("c(", toString(shQuote(installed.packages()[, "Package"]), collapse=","), collapse=""))
saveRDS(packagesstring, "packagestring.RDS")
packagesstring<-readRDS("packagestring.RDS")
install.packages(packagestring)
packagesstring
install.packages(packagesstring)
packagesstring
install.packages('abind')
install.packages(packagesstring)
warning()
packagesstring<- paste(paste0("c(", toString(shQuote(installed.packages()[, "Package"]), collapse=","), collapse=""))
packagesstring<- paste(paste0("c(", toString(shQuote(installed.packages()[, "Package"]), collapse=","), collapse=""))
saveRDS(packagesstring, "packagestring.RDS")
packagesstring<-readRDS("packagestring.RDS")
install.packages(packagesstring)
packagesstring<- installed.packages()[, "Package"]),
saveRDS(packagesstring, "packagestring.RDS")
packagesstring<- installed.packages()[, "Package"])
packagesstring<- installed.packages()[, "Package"]
packagesstring
saveRDS(packagesstring, "packagestring.RDS")
packagesstring<-readRDS("packagestring.RDS")
install.packages(packagesstring)
list.of.packages<-installed.packages()[, "Package"]
list.of.packages
new.packages<- packagesstring[!(packagesstring %in% list.of.packages)]
new.packages()
new.packages
if(length(new.packages))>0 install.packages(new.packages)
if(length(new.packages)>0) install.packages(new.packages)
setwd("~/Google Drive/ProjectFiles/CRESHwebmap/alcoholtobacco")
