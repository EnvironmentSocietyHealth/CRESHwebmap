paste0(text$sel, "")
?pasts
?paste
text2<-paste0(text$sel, collapse="")
text2
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(text$sel, " ", "")
View(text)
?gsub
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
View(text)
for(i in 1:13){
sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0("[^", i, "]"), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0("^*", i, "*$"), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0("^*", i), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0("^", i), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0(i), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
cases_per_house <- separate(text,into = c("p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13"),skin_problem,sep=" ")
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0("([0-9]+).*$", "\\1"), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
text$sel<-gsub(" ", "", text$sel)
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0("([1]+).*$", "\\1"), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(as.integer(grepl(paste0("([1]+).*$", "\\1"), text[,1])))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
View(text)
library(readr)
parse_number(text)
library(readr)
parse_number(text$sel)
View(text)
library(stringr)
text %>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
View(text)
library(stringr)
numextract <- function(string){
str_extract(string, "\\-*\\d+\\.*\\d*")
}
numextract(text$sel)
?numextract
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
separate(text
)
library(tidyr)
?seperate
?separate
separate(text, 1)
separate(text, 1, paste0("sep", i))
separate(text, 1, c("p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13"))
text<-separate(text, 1, c("p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13"))
View(text)
?apply
View(text)
sel<-as.data.frame(apply(text, 2, function(x) as.integer(i %in% x)))
sel
i
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
library(tidyr)
text<-separate(text, 1, c("p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13"))
View(text)
i=1
as.data.frame(apply(text, 2, function(x) as.integer(i %in% x))
)
View(text)
sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
View(text)
View(sel)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
library(tidyr)
text<-separate(text, 1, c("p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13"))
for(i in 1:13){
#sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(sel)
View(text)
text<-data.frame(sel=c("1","6","6 12","1","2 3","3","12 13","4 3"))
library(tidyr)
text<-separate(text, 1, c("p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13"))
for(i in 1:13){
sel<-as.data.frame(apply(text, 1, function(x) as.integer(i %in% x)))
names(sel) <- paste0("sel", i)
text <- cbind(text,sel)
}
View(text)
View(text)
DF <- as.data.frame(cbind(c("Aa1","aB1","aA1"),c("A","B","A"),c("D","F","G")))
colnames(DF)[1] <- "State1"
colnames(DF)[2] <- "StringToBeReplaced"
colnames(DF)[3] <- "StringToTakeItsPlace"
DF$State1[2]
DF$State1[2][2]
DF$State1[2,1]
DF$State1
DF$State1[[2]]
DF$State1[[2]][1]
DF$State1[1]
DF$State1[3]
DF$State1[3]
substr(DF$State1,1,1)
substr(DF$State1,2)
substr(DF$State1,2,2)
View(DF)
grep(DF$State1, StringToBeReplaced
)
)grep(DF$State1, DF$StringToBeReplaced)
grep(DF$State1, DF$StringToBeReplaced)
?sub
gsub(StringToBeReplaced, StringToTakeItsPlace, DF)
gsub(DF$StringToBeReplaced, DF$StringToTakeItsPlace, DF)
gsub(DF$StringToBeReplaced, DF$StringToTakeItsPlace, DF$State1)
apply(DF, 1, function(x) gsub(StringToBeReplaced, StringToTakeItsPlace, x)
library(googleway)
res <- google_directions(origin = "Hawes Pier, South Queensferry",
destination = "Nelson's hall, South Queensferry",
)
res <- google_directions(origin = "Hawes Pier, South Queensferry",
destination = "Nelson's hall, South Queensferry",
key = AIzaSyAFaLn6iMnO1sZtW1MRgD8Vph4u4benLIg)
res <- google_directions(origin = "Hawes Pier, South Queensferry",
destination = "Nelson's hall, South Queensferry",
key = "AIzaSyAFaLn6iMnO1sZtW1MRgD8Vph4u4benLIg")
pl <- res$routes$overview_polyline$points
decode_pl(pl)
res <- google_directions(origin = "Hawes Pier, South Queensferry",
destination = "Nelson's hall, South Queensferry",
key = "AIzaSyAFaLn6iMnO1sZtW1MRgD8Vph4u4benLIg")
res
res <- google_directions(origin = "Hawes Pier, South Queensferry",
destination = "Nelson's hall, South Queensferry",
key = "AIzaSyAFaLn6iMnO1sZtW1MRgD8Vph4u4benLIg")
res
res <- google_directions(origin = "Hawes Pier, South Queensferry",
destination = "Nelson's hall, South Queensferry",
key = "AIzaSyDmQZaaROsrdSERPzuMrI_9vPkrkKwKmzs")
res
?google_directions
res <- google_directions(origin = "Hawes Pier, South Queensferry",
destination = "Nelson's hall, South Queensferry",
key = "AIzaSyDmQZaaROsrdSERPzuMrI_9vPkrkKwKmzs",
mode="walking")
res
library(googleway)
pl <- res$routes$overview_polyline$points
pl2<-decode_pl(pl)
plot(pl2)
plot(pl)
library(googleway)
poly<-direction_polyline(res)
library(googleway)
?direction_polyline
update.packages("googleway")
poly<-direction_polyline(res)
pl <- direction_polyline(df)
?knitr
library(knitr)
add4<-read.csv(paste0("data/SIMD.csv"))
getwd()
setwd("~/Google Drive/ProjectFiles/CRESHwebmap/alcoholtobacco")
add4<-read.csv(paste0("data/SIMD.csv"))
View(add4)
data="800alcoholTOTAL2016.csv"
input="City of Edinburgh"
Datazone<-readRDS(paste0("geography/DZ/la/", input, ".rds"))
Datazone <- spTransform(Datazone, CRS("+proj=longlat +datum=WGS84"))
data <- as.character(paste0(input$buffer, input$datatype, input$year, ".csv"))
add<-read.csv(paste0("data/output/",data))
Scotlandmean<-mean(add[,2])
Datazone$Scottishaverage<-Scotlandmean
Scottish90th<-quantile(add[,2], c(.90),na.rm=T)
add$CODE<-trimws(add$CODE)
Datazone<-merge(Datazone, add, by.x="datazone", by.y="CODE")
Datazone$stdareaha<-NULL
Datazone$stdareakm2<-NULL
Datazone$shape_leng<-NULL
Datazone@data$SCOcat[Datazone@data[,15]>=(Scotlandmean-0.2*Scotlandmean) & Datazone@data[,15]<=Scotlandmean+(0.15*Scotlandmean)]<-4
Datazone2<-subset(Datazone, Datazone@data[,15]<(Scotlandmean-0.2*Scotlandmean))
breaks1<-unique(quantile(Datazone2@data[,15], probs=0:3/3))
Datazone@data$SCOcat2<-ifelse(Datazone@data[,15]<(Scotlandmean-0.2*Scotlandmean), cut(Datazone@data[,15], unique(breaks1), include.lowest=TRUE, labels=FALSE), NA)
Datazone3<-subset(Datazone, Datazone@data[,15]>Scotlandmean+(0.15*Scotlandmean))
breaks2<-unique(quantile(Datazone3@data[,15], probs=0:3/3))
Datazone@data$SCOcat3<-ifelse(Datazone@data[,15]>Scotlandmean+(0.15*Scotlandmean), cut(Datazone@data[,15], unique(breaks2), include.lowest=TRUE, labels=FALSE), NA)
Datazone@data$SCOcat3[Datazone@data$SCOcat3==1]<-5
Datazone@data$SCOcat3[Datazone@data$SCOcat3==2]<-6
Datazone@data$SCOcat3[Datazone@data$SCOcat3==3]<-7
Datazone@data$SCOcat4<-paste(Datazone@data$SCOcat, Datazone@data$SCOcat2, Datazone@data$SCOcat3)
Datazone@data$SCOcat4<-trimws(Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-sub("NA NA", "", Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-sub(" NA", "", Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-sub("NA ", "", Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-trimws(Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-as.numeric(Datazone@data$SCOcat4)
################## Urban Rural
add2<-read.csv(paste0("data/urbanrural.csv"))
add2$Datazone2011<-add2[,1]
UrbRur<-merge(add, add2, by.x="CODE", by.y="Datazone2011")
UrbRur$UR6_2013_2014<-as.numeric(as.character(UrbRur$UR6_2013_2014))
UrbRurmean <-aggregate(UrbRur[,2], by=list(UrbRur$UR6_2013_2014), FUN=mean, na.rm=TRUE)
names(UrbRurmean)<-c("UR6_2013_2014", "UR6_2013_2014mean")
UrbRurCalc<-merge(UrbRurmean, UrbRur, by="UR6_2013_2014")
UrbRurCalc90<-aggregate(UrbRur[,2], by = list(UrbRur$UR6_2013_2014), FUN = function(x) quantile(x, probs = 0.90))
names(UrbRurCalc90)<-c("UR6_2013_2014", "UR6_2013_201490")
UrbRurCalc<-merge(UrbRurCalc, UrbRurCalc90, by="UR6_2013_2014")
UrbRurCalc$UrbRurcat[UrbRurCalc[,4]>=(UrbRurCalc$UR6_2013_2014mean-0.2*UrbRurCalc$UR6_2013_2014mean) & UrbRurCalc[,4]<=UrbRurCalc$UR6_2013_2014mean+(0.15*UrbRurCalc$UR6_2013_2014mean)]<-4
UrbRurCalc2<-subset(UrbRurCalc, UrbRurCalc[,4]<(UrbRurCalc$UR6_2013_2014mean-0.2*UrbRurCalc$UR6_2013_2014mean))
breaks5<-unique(quantile(UrbRurCalc2[,4], probs=0:3/3))
UrbRurCalc$UrbRurcat2<-ifelse(UrbRurCalc[,4]<(UrbRurCalc$UR6_2013_2014mean-0.2*UrbRurCalc$UR6_2013_2014mean), cut(UrbRurCalc[,4], unique(breaks5), include.lowest=TRUE, labels=FALSE), NA)
UrbRurCalc3<-subset(UrbRurCalc, UrbRurCalc[,4]>UrbRurCalc$UR6_2013_2014mean+(0.15*UrbRurCalc$UR6_2013_2014mean))
breaks6<-unique(quantile(UrbRurCalc3[,4], probs=0:3/3))
UrbRurCalc$UrbRurcat3<-ifelse(UrbRurCalc[,4]>UrbRurCalc$UR6_2013_2014mean+(0.15*UrbRurCalc$UR6_2013_2014mean), cut(UrbRurCalc[,4], unique(breaks6), include.lowest=TRUE, labels=FALSE), NA)
UrbRurCalc$UrbRurcat3[UrbRurCalc$UrbRurcat3==1]<-5
UrbRurCalc$UrbRurcat3[UrbRurCalc$UrbRurcat3==2]<-6
UrbRurCalc$UrbRurcat3[UrbRurCalc$UrbRurcat3==3]<-7
UrbRurCalc$UrbRurcat4<-paste(UrbRurCalc$UrbRurcat, UrbRurCalc$UrbRurcat2, UrbRurCalc$UrbRurcat3)
UrbRurCalc$UrbRurcat4<-trimws(UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-sub("NA NA", "", UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-sub(" NA", "", UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-sub("NA ", "", UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-trimws(UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-as.numeric(UrbRurCalc$UrbRurcat4)
UrbRurCalcAdd<-subset(UrbRurCalc, select=c("CODE", "UrbRurcat4", "UR6_2013_2014mean", "UR6_2013_201490", "UR6_2013_2014"))
Datazone<-merge(Datazone, UrbRurCalcAdd,by.x="code", by.y="CODE")
add4<-read.csv(paste0("data/SIMD.csv"))
SIMD<-merge(add, add4, by.x="CODE", by.y="Data_Zone")
SIMD$SIMDrank5<-as.numeric(quantcut(as.numeric(SIMD$Income_domain_2016_rank), 5))
SIMDmean <-aggregate(SIMD[,2], by=list(SIMD$SIMDrank5), FUN=mean, na.rm=TRUE)
names(SIMDmean)<-c("SIMDrank5", "SIMDmean")
SIMDCalc<-merge(SIMDmean, SIMD, by="SIMDrank5")
SIMDCalc90<-aggregate(SIMD[,2], by = list(SIMD$SIMDrank5), FUN = function(x) quantile(x, probs = 0.90))
names(SIMDCalc90)<-c("SIMDrank5", "SIMD90")
SIMDCalc<-merge(SIMDCalc, SIMDCalc90, by="SIMDrank5")
library(gtools)
add4<-read.csv(paste0("data/SIMD.csv"))
SIMD<-merge(add, add4, by.x="CODE", by.y="Data_Zone")
SIMD$SIMDrank5<-as.numeric(quantcut(as.numeric(SIMD$Income_domain_2016_rank), 5))
SIMDmean <-aggregate(SIMD[,2], by=list(SIMD$SIMDrank5), FUN=mean, na.rm=TRUE)
names(SIMDmean)<-c("SIMDrank5", "SIMDmean")
SIMDCalc<-merge(SIMDmean, SIMD, by="SIMDrank5")
SIMDCalc90<-aggregate(SIMD[,2], by = list(SIMD$SIMDrank5), FUN = function(x) quantile(x, probs = 0.90))
names(SIMDCalc90)<-c("SIMDrank5", "SIMD90")
SIMDCalc<-merge(SIMDCalc, SIMDCalc90, by="SIMDrank5")
SIMDCalc$SIMDcat[SIMDCalc[,4]>=(SIMDCalc$SIMDmean-0.2*SIMDCalc$SIMDmean) & SIMDCalc[,4]<=SIMDCalc$SIMDmean+(0.15*SIMDCalc$SIMDmean)]<-4
SIMDCalc2<-subset(SIMDCalc, SIMDCalc[,4]<(SIMDCalc$SIMDmean-0.2*SIMDCalc$SIMDmean))
breaks5<-unique(quantile(SIMDCalc2[,4], probs=0:3/3))
SIMDCalc$SIMDcat2<-ifelse(SIMDCalc[,4]<(SIMDCalc$SIMDmean-0.2*SIMDCalc$SIMDmean), cut(SIMDCalc[,4], unique(breaks5), include.lowest=TRUE, labels=FALSE), NA)
SIMDCalc3<-subset(SIMDCalc, SIMDCalc[,4]>SIMDCalc$SIMDmean+(0.15*SIMDCalc$SIMDmean))
breaks6<-unique(quantile(SIMDCalc3[,4], probs=0:3/3))
SIMDCalc$SIMDcat3<-ifelse(SIMDCalc[,4]>SIMDCalc$SIMDmean+(0.15*SIMDCalc$SIMDmean), cut(SIMDCalc[,4], unique(breaks6), include.lowest=TRUE, labels=FALSE), NA)
SIMDCalc$SIMDcat3[SIMDCalc$SIMDcat3==1]<-5
SIMDCalc$SIMDcat3[SIMDCalc$SIMDcat3==2]<-6
SIMDCalc$SIMDcat3[SIMDCalc$SIMDcat3==3]<-7
SIMDCalc$SIMDcat4<-paste(SIMDCalc$SIMDcat, SIMDCalc$SIMDcat2, SIMDCalc$SIMDcat3)
SIMDCalc$SIMDcat4<-trimws(SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-sub("NA NA", "", SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-sub(" NA", "", SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-sub("NA ", "", SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-trimws(SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-as.numeric(SIMDCalc$SIMDcat4)
SIMDCalcAdd<-subset(SIMDCalc, select=c("CODE", "SIMDcat4", "SIMDmean", "SIMD90", "SIMDrank5"))
Datazone<-merge(Datazone, SIMDCalcAdd,by.x="code", by.y="CODE")
Datazone@data$SIMDrank5
datazonetest<-as.data.frame(datazone)
datazonetest<-as.data.frame(Datazone)
View(datazonetest)
############################# have to make the categories for LA AVERAGE #############################
LAmean<-mean(Datazone@data[,15], na.rm=T)
LA90th<-quantile(Datazone@data[,15], c(.90), na.rm = T)
# have to make the categories
Datazone@data$LAcat[Datazone@data[,15]>=(LAmean-0.2*LAmean) & Datazone@data[,15]<=LAmean+(0.15*LAmean)]<-4
Datazone2<-subset(Datazone, Datazone@data[,15]<(LAmean-0.2*LAmean))
breaks3<-unique(quantile(Datazone2@data[,15], probs=0:3/3))
if (length(breaks3)>1 ){
Datazone@data$LAcat2<-ifelse(Datazone@data[,15]<(LAmean-0.2*LAmean), cut(Datazone@data[,15], unique(breaks3), include.lowest=TRUE, labels=FALSE), NA)
} else {
Datazone@data$LAcat2[Datazone@data[,15]<(LAmean-0.2*LAmean)]<-1
}
Datazone3<-subset(Datazone, Datazone@data[,15]>LAmean+(0.15*LAmean))
breaks4<-unique(quantile(Datazone3@data[,15], probs=0:3/3))
if (length(breaks4)>1){
Datazone@data$LAcat3<-ifelse(Datazone@data[,15]>LAmean+(0.15*LAmean), cut(Datazone@data[,15], unique(breaks4), include.lowest=TRUE, labels=FALSE), NA)
} else {   Datazone@data$LAcat3<-1
}
Datazone@data$LAcat3[Datazone@data$LAcat3==1]<-5
Datazone@data$LAcat3[Datazone@data$LAcat3==2]<-6
Datazone@data$LAcat3[Datazone@data$LAcat3==3]<-7
Datazone@data$LAcat4<-paste(Datazone@data$LAcat, Datazone@data$LAcat2, Datazone@data$LAcat3)
Datazone@data$LAcat4<-trimws(Datazone@data$LAcat4)
Datazone@data$LAcat4<-sub("NA NA", "", Datazone@data$LAcat4)
Datazone@data$LAcat4<-sub(" NA", "", Datazone@data$LAcat4)
Datazone@data$LAcat4<-sub("NA ", "", Datazone@data$LAcat4)
Datazone@data$LAcat4<-trimws(Datazone@data$LAcat4)
Datazone@data$LAcat4<-as.numeric(Datazone@data$LAcat4)
datazonetest<-as.data.frame(Datazone)
View(datazonetest)
HospAdd<-read.csv(paste0("data/Hosp.csv"))
HospAdd$ALCOHOL<-sub(",", "", HospAdd$ALCOHOL)
HospAdd$ALCOHOL<-as.numeric(as.character(HospAdd$ALCOHOL))
Datazone<-merge(Datazone, HospAdd,by="code")
ScottishHospmean<-mean(HospAdd$ALCOHOL, na.rm=T)
ScottishHosp90<-quantile(HospAdd$ALCOHOL, c(.90), na.rm=T)
LAHospmean<-mean(Datazone@data$ALCOHOL, na.rm=T)
LAHosp90<-quantile(Datazone@data$ALCOHOL, c(.90), na.rm=T)
HospAdd<-merge(HospAdd, SIMDCalcAdd, by.x="code", by.y="CODE")
DepHospmean<-aggregate(as.numeric(HospAdd$ALCOHOL), by=list(HospAdd$SIMDrank5), FUN=mean, na.rm=TRUE)
colnames(DepHospmean)<-c("SIMDrank5","HospmeanSIMD")
DepHosp90<-data.table(do.call("rbind", tapply(HospAdd$ALCOHOL, HospAdd$SIMDrank5, quantile, c(.90, na.rm=T))))[,1]
DepHosp90$SIMDrank5<-rep(1:5)
library(data.table)
HospAdd<-merge(HospAdd, SIMDCalcAdd, by.x="code", by.y="CODE")
DepHospmean<-aggregate(as.numeric(HospAdd$ALCOHOL), by=list(HospAdd$SIMDrank5), FUN=mean, na.rm=TRUE)
colnames(DepHospmean)<-c("SIMDrank5","HospmeanSIMD")
DepHosp90<-data.table(do.call("rbind", tapply(HospAdd$ALCOHOL, HospAdd$SIMDrank5, quantile, c(.90, na.rm=T))))[,1]
DepHosp90$SIMDrank5<-rep(1:5)
HospAdd<-merge(HospAdd, SIMDCalcAdd, by.x="code", by.y="CODE")
DepHospmean<-aggregate(as.numeric(HospAdd$ALCOHOL), by=list(HospAdd$SIMDrank5), FUN=mean, na.rm=TRUE)
colnames(DepHospmean)<-c("SIMDrank5","HospmeanSIMD")
View(DepHospmean)
DepHosp90<-data.table(do.call("rbind", tapply(HospAdd$ALCOHOL, HospAdd$SIMDrank5, quantile, c(.90, na.rm=T))))[,1]
DepHosp90$SIMDrank5<-rep(1:5)
View(DepHosp90)
colnames(DepHosp90)<-c("Hosp90SIMD","SIMDrank5")
DepHosp<-merge(DepHospmean, DepHosp90, by="SIMDrank5")
Datazone<-merge(Datazone, DepHosp, by="SIMDrank5")
datazonetest<-as.data.frame(Datazone)
View(datazonetest)
CrimeAdd<-read.csv(paste0("data/crime.csv"))
Datazone<-merge(Datazone, CrimeAdd,by="code")
ScottishCrimeratemean<-mean(CrimeAdd$crime_rate, na.rm=T)
ScottishCrimerate90<-quantile(CrimeAdd$crime_rate, c(.90), na.rm=T)
LACrimemean<-mean(Datazone@data$crime_rate)
LACrime90<-quantile(Datazone@data$crime_rate, c(.90), na.rm=T)
CrimeAdd<-merge(CrimeAdd, SIMDCalcAdd, by.x="code", by.y="CODE")
DepCrimemean<-aggregate(as.numeric(CrimeAdd$crime_rate), by=list(CrimeAdd$SIMDrank5), FUN=mean, na.rm=TRUE)
colnames(DepCrimemean)<-c("SIMDrank5","CrimemeanSIMD")
DepCrime90<-data.table(do.call("rbind", tapply(CrimeAdd$crime_rate, CrimeAdd$SIMDrank5, quantile, c(.90, na.rm=T))))[,1]
DepCrime90$SIMDrank5<-rep(1:5)
colnames(DepCrime90)<-c("Crime90SIMD","SIMDrank5")
DepCrime<-merge(DepCrimemean, DepCrime90, by="SIMDrank5")
Datazone<-merge(Datazone, DepCrime, by="SIMDrank5")
################# Mortality
MortAdd<-read.csv("data/Mort.csv")
MortAdd$Tobrelated_smr<-as.numeric(MortAdd$Tobrelated_smr)
MortAdd$Alcrelated_smr<-as.numeric(MortAdd$Alcrelated_smr)
MortAdd$Alcrelated_smr2<-quantcut(MortAdd$Alcrelated_smr, 5)
levels(MortAdd$Alcrelated_smr2)<-sub("\\(|\\[|\\]", "", levels(MortAdd$Alcrelated_smr2))
levels(MortAdd$Alcrelated_smr2)<-sub("\\]", "", levels(MortAdd$Alcrelated_smr2))
levels(MortAdd$Alcrelated_smr2)<-sub(",", " and ", levels(MortAdd$Alcrelated_smr2))
MortAdd$Tobrelated_smr2<-quantcut(MortAdd$Tobrelated_smr, 5)
levels(MortAdd$Tobrelated_smr2)<-sub("\\(|\\[|\\]", "", levels(MortAdd$Tobrelated_smr2))
levels(MortAdd$Tobrelated_smr2)<-sub("\\]", "", levels(MortAdd$Tobrelated_smr2))
levels(MortAdd$Tobrelated_smr2)<-sub(",", " and ", levels(MortAdd$Tobrelated_smr2))
Datazone<-merge(Datazone, MortAdd,by="code")
ScottishMortAlc90<-quantile(MortAdd$Alcrelated_smr, c(.90), na.rm=T)
ScottishMortTob90<-quantile(MortAdd$Tobrelated_smr, c(.90), na.rm=T)
LAMortTobmean<-mean(Datazone@data$Tobrelated_smr)
LAMortTob90<-quantile(Datazone@data$Tobrelated_smr, c(.90), na.rm=T)
LAMortAlcmean<-mean(Datazone@data$Alcrelated_smr)
LAMortAlc90<-quantile(Datazone@data$Alcrelated_smr, c(.90), na.rm=T)
# By SIMD
MortAdd<-merge(MortAdd, SIMDCalcAdd, by.x="code", by.y="CODE")
DepTobMortmean<-aggregate(as.numeric(MortAdd$Tobrelated_smr), by=list(MortAdd$SIMDrank5), FUN=mean, na.rm=TRUE)
colnames(DepTobMortmean)<-c("SIMDrank5","TobMortmeanSIMD")
DepTobMort90<-data.table(do.call("rbind", tapply(MortAdd$Tobrelated_smr, MortAdd$SIMDrank5, quantile, c(.90, na.rm=T))))[,1]
DepTobMort90$SIMDrank5<-rep(1:5)
colnames(DepTobMort90)<-c("TobMort90SIMD","SIMDrank5")
DepTobMort<-merge(DepTobMortmean, DepTobMort90, by="SIMDrank5")
Datazone<-merge(Datazone, DepTobMort, by="SIMDrank5")
DepAlcMortmean<-aggregate(as.numeric(MortAdd$Alcrelated_smr), by=list(MortAdd$SIMDrank5), FUN=mean, na.rm=TRUE)
colnames(DepAlcMortmean)<-c("SIMDrank5","AlcMortmeanSIMD")
DepAlcMort90<-data.table(do.call("rbind", tapply(MortAdd$Alcrelated_smr, MortAdd$SIMDrank5, quantile, c(.90, na.rm=T))))[,1]
DepAlcMort90$SIMDrank5<-rep(1:5)
colnames(DepAlcMort90)<-c("AlcMort90SIMD","SIMDrank5")
DepAlcMort<-merge(DepAlcMortmean, DepAlcMort90, by="SIMDrank5")
Datazone<-merge(Datazone, DepAlcMort, by="SIMDrank5")
# by URBAN
UrbAdd<-merge(HospAdd,UrbRurCalcAdd,by.x="code", by="CODE")
UrbHospmean<-aggregate(as.numeric(UrbAdd$ALCOHOL), by=list(UrbAdd$UR6_2013_2014), FUN=mean, na.rm=TRUE)
colnames(UrbHospmean)<-c("UR6_2013_2014","HospmeanUrb")
UrbHosp90<-data.table(do.call("rbind", tapply(UrbAdd$ALCOHOL, UrbAdd$UR6_2013_2014, quantile, c(.90, na.rm=T))))[,1]
UrbHosp90$UR6_2013_2014<-rep(1:6)
colnames(UrbHosp90)<-c("Hosp90Urb","UR6_2013_2014")
UrbHosp<-merge(UrbHospmean, UrbHosp90, by="UR6_2013_2014")
Datazone<-merge(Datazone, UrbHosp, by="UR6_2013_2014")
# by URBAN
UrbAdd<-merge(CrimeAdd,UrbRurCalcAdd,by.x="code", by="CODE")
UrbCrimemean<-aggregate(as.numeric(UrbAdd$crime_rate), by=list(UrbAdd$UR6_2013_2014), FUN=mean, na.rm=TRUE)
colnames(UrbCrimemean)<-c("UR6_2013_2014","CrimemeanUrb")
UrbCrime90<-data.table(do.call("rbind", tapply(UrbAdd$crime_rate, UrbAdd$UR6_2013_2014, quantile, c(.90, na.rm=T))))[,1]
UrbCrime90$UR6_2013_2014<-rep(1:6)
colnames(UrbCrime90)<-c("Crime90Urb","UR6_2013_2014")
UrbCrime<-merge(UrbCrimemean, UrbCrime90, by="UR6_2013_2014")
Datazone<-merge(Datazone, UrbCrime, by="UR6_2013_2014")
# By Urban
MortAdd<-merge(MortAdd, UrbRurCalcAdd, by.x="code", by.y="CODE")
UrbTobMortmean<-aggregate(as.numeric(MortAdd$Tobrelated_smr), by=list(MortAdd$UR6_2013_2014), FUN=mean, na.rm=TRUE)
colnames(UrbTobMortmean)<-c("UR6_2013_2014","TobMortmeanSIMD")
UrbTobMort90<-data.table(do.call("rbind", tapply(MortAdd$Tobrelated_smr, MortAdd$UR6_2013_2014, quantile, c(.90, na.rm=T))))[,1]
UrbTobMort90$UR6_2013_2014<-rep(1:6)
colnames(UrbTobMort90)<-c("TobMort90Urb","UR6_2013_2014")
UrbTobMort<-merge(UrbTobMortmean, UrbTobMort90, by="UR6_2013_2014")
Datazone<-merge(Datazone, UrbTobMort, by="UR6_2013_2014")
UrbAlcMortmean<-aggregate(as.numeric(MortAdd$Alcrelated_smr), by=list(MortAdd$UR6_2013_2014), FUN=mean, na.rm=TRUE)
colnames(UrbAlcMortmean)<-c("UR6_2013_2014","AlcMortmeanSIMD")
UrbAlcMort90<-data.table(do.call("rbind", tapply(MortAdd$Alcrelated_smr, MortAdd$UR6_2013_2014, quantile, c(.90, na.rm=T))))[,1]
UrbAlcMort90$UR6_2013_2014<-rep(1:6)
colnames(UrbAlcMort90)<-c("AlcMort90Urb","UR6_2013_2014")
UrbAlcMort<-merge(UrbAlcMortmean, UrbAlcMort90, by="UR6_2013_2014")
Datazone<-merge(Datazone, UrbAlcMort, by="UR6_2013_2014")
datazonetest<-as.data.frame(Datazone)
View(datazonetest)
Datazone@data$SIMDrank5
datazonetest<-as.data.frame(Datazone)
View(datazonetest)
df_test<-as.data.frame(Datazone@data)
View(df_test)
View(df_test)
input="East Ayrshire"
shiny::runApp()
library(shinyBS)
install.packages("shinyBS")
runApp()
add4<-read.csv(paste0("data/SIMD.csv"))
add4<-read.csv(paste0("data/SIMD.csv"))
names(add4)
add4<-read.csv(paste0("data/SIMD.csv"))
add4
runApp()
install.packages("DT")
runApp()
install.packages("BAMMtools")
runApp()
install.packages("mongolite")
runApp()
install.packages('leaflet.extras')
install.packages("leaflet.extras")
runApp()
devtools::install_github("timelyportfolio/sweetalertR")
runApp()
devtools::install_github("hrbrmstr/ipapi")
runApp()
runApp()
