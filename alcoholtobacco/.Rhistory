shiny::runApp('C:/Users/mcherrie/Google Drive/ProjectFiles/CRESHwebmap/webmap')
library(leaflet.extras)
?leaflet.extras
webshot::install_phantomjs()
devtools::install_github("wch/webshot")
library(webshot)
webshot("https://www.r-project.org/", "r.png")
webshot("https://www.r-project.org/", "r.pdf") # Can also output to PDF
getwd()
setwd("C:/Users/mcherrie/Google Drive/ProjectFiles/CRESHwebmap/alcoholtobacco")
shiny::runApp()
geog<-readRDS("geography/councilareas.rds")
geog
plot(geog)
geog3 <- spTransform(geog, CRS("+proj=longlat +datum=WGS84"))
geog3
runApp()
runApp()
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
runApp()
library(shiny)
library(ggmap)
library(leaflet)
ui <- shinyUI(bootstrapPage(
leafletOutput("map")
))
server <- shinyServer(function(input, output, session) {
## One alternative: store circles data?
## I dont actually implement this, but you would do this in the observer as well
dat <- reactiveValues(circs = data.frame(lng=numeric(), lat=numeric()))
## Make your initial map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng = -43.1729, lat = -22.9068, zoom = 11) %>%
addTiles(options = providerTileOptions(noWrap = TRUE))
})
## Observe mouse clicks and add circles
observeEvent(input$map_click, {
## Get the click info like had been doing
click <- input$map_click
clat <- click$lat
clng <- click$lng
address <- revgeocode(c(clng,clat))
## Add the circle to the map proxy
## so you dont need to re-render the whole thing
## I also give the circles a group, "circles", so you can
## then do something like hide all the circles with hideGroup('circles')
leafletProxy('map') %>% # use the proxy to save computation
addCircles(lng=clng, lat=clat, group='circles',
weight=1, radius=100, color='black', fillColor='orange',
popup=address, fillOpacity=0.5, opacity=1)
})
})
shinyApp(ui=ui, server=server)
ui <- bootstrapPage(
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
leafletOutput("Map", width="100%", height="100%"),
absolutePanel(top=10, right=10,
selectInput("location", "Community", c("", locs$loc), selected=""),
conditionalPanel("input.location !== null && input.location !== ''",
actionButton("button_plot_and_table", "View Plot/Table", class="btn-block"))
)
)
server <- function(input, output, session) {
acm_defaults <- function(map, x, y) addCircleMarkers(map, x, y, radius=6, color="black", fillColor="orange", fillOpacity=1, opacity=1, weight=2, stroke=TRUE, layerId="Selected")
output$Map <- renderLeaflet({
leaflet() %>% setView(lon, lat, 4) %>% addTiles() %>%
addCircleMarkers(data=locs, radius=6, color="black", stroke=FALSE, fillOpacity=0.5, group="locations", layerId = ~loc)
})
observeEvent(input$Map_marker_click, { # update the map markers and view on map clicks
p <- input$Map_marker_click
proxy <- leafletProxy("Map")
if(p$id=="Selected"){
proxy %>% removeMarker(layerId="Selected")
} else {
proxy %>% setView(lng=p$lng, lat=p$lat, input$Map_zoom) %>% acm_defaults(p$lng, p$lat)
}
})
observeEvent(input$Map_marker_click, { # update the location selectInput on map clicks
p <- input$Map_marker_click
if(!is.null(p$id)){
if(is.null(input$location) || input$location!=p$id) updateSelectInput(session, "location", selected=p$id)
}
})
observeEvent(input$location, { # update the map markers and view on location selectInput changes
p <- input$Map_marker_click
p2 <- subset(locs, loc==input$location)
proxy <- leafletProxy("Map")
if(nrow(p2)==0){
proxy %>% removeMarker(layerId="Selected")
} else if(length(p$id) && input$location!=p$id){
proxy %>% setView(lng=p2$lon, lat=p2$lat, input$Map_zoom) %>% acm_defaults(p2$lon, p2$lat)
} else if(!length(p$id)){
proxy %>% setView(lng=p2$lon, lat=p2$lat, input$Map_zoom) %>% acm_defaults(p2$lon, p2$lat)
}
})
}
shinyApp(ui, server)
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
runApp()
geog<-readRDS("geography/councilareas.rds")
geog
LA2 <- ms_simplify(geog, keep= 0.05)
library(rmapshaper)
LA2 <- ms_simplify(geog, keep= 0.05)
plot(LA2)
gtewd()
getwd()
saveRDS(LA2, "geography/councilareas2.rds")
Datazone<-readRDS(paste0("geography/DZ/la/", trimws("City of Edinburgh"), ".rds"))
names(Datazone)
Datazone <- spTransform(Datazone, CRS("+proj=longlat +datum=WGS84"))
Datazone@data$respop2011<-NULL
Datazone@data$stdareakm2<-NULL
Datazone@data$shape_leng<-NULL
data <- as.character(paste0(input$buffer, input$datatype, input$year, ".csv"))
add<-read.csv(paste0("data/output/",data))
Scotlandmean<-mean(add[,3])
Datazone$Scottishaverage<-Scotlandmean
Scottish90th<-quantile(add[,3], c(.90))
add$CODE<-trimws(add$CODE)
Datazone<-merge(Datazone, add, by.x="datazone", by.y="CODE")
############################# have to make the categories for SCOTTISH AVERAGE #############################
Datazone@data$SCOcat[Datazone@data[,16]>=(Scotlandmean-0.2*Scotlandmean) & Datazone@data[,16]<=Scotlandmean+(0.15*Scotlandmean)]<-4
Datazone2<-subset(Datazone, Datazone@data[,16]<(Scotlandmean-0.2*Scotlandmean))
breaks1<-unique(quantile(Datazone2@data[,16], probs=0:3/3))
Datazone@data$SCOcat2<-ifelse(Datazone@data[,16]<(Scotlandmean-0.2*Scotlandmean), cut(Datazone@data[,16], unique(breaks1), include.lowest=TRUE, labels=FALSE), NA)
Datazone3<-subset(Datazone, Datazone@data[,16]>Scotlandmean+(0.15*Scotlandmean))
breaks2<-unique(quantile(Datazone3@data[,16], probs=0:3/3))
Datazone@data$SCOcat3<-ifelse(Datazone@data[,16]>Scotlandmean+(0.15*Scotlandmean), cut(Datazone@data[,16], unique(breaks2), include.lowest=TRUE, labels=FALSE), NA)
Datazone@data$SCOcat3[Datazone@data$SCOcat3==1]<-5
Datazone@data$SCOcat3[Datazone@data$SCOcat3==2]<-6
Datazone@data$SCOcat3[Datazone@data$SCOcat3==3]<-7
Datazone@data$SCOcat4<-paste(Datazone@data$SCOcat, Datazone@data$SCOcat2, Datazone@data$SCOcat3)
Datazone@data$SCOcat4<-trimws(Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-sub("NA NA", "", Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-sub(" NA", "", Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-sub("NA ", "", Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-trimws(Datazone@data$SCOcat4)
Datazone@data$SCOcat4<-as.numeric(Datazone@data$SCOcat4)
## too slow load up from file- simplify-
# Datazone@data$LAid<-99
# LAoutline <- gUnaryUnion(Datazone, id = Datazone@data$LAid)
###################################################################################################################
################## Urban Rural
add2<-read.csv(paste0("data/urbanrural.csv"))
UrbRur<-merge(add, add2, by.x="CODE", by.y="Datazone2011")
UrbRur$UR6_2013_2014<-as.numeric(as.character(UrbRur$UR6_2013_2014))
UrbRurmean <-aggregate(UrbRur[,3], by=list(UrbRur$UR6_2013_2014), FUN=mean, na.rm=TRUE)
names(UrbRurmean)<-c("UR6_2013_2014", "UR6_2013_2014mean")
UrbRurCalc<-merge(UrbRurmean, UrbRur, by="UR6_2013_2014")
UrbRurCalc90<-aggregate(UrbRur[,3], by = list(UrbRur$UR6_2013_2014), FUN = function(x) quantile(x, probs = 0.90))
names(UrbRurCalc90)<-c("UR6_2013_2014", "UR6_2013_201490")
UrbRurCalc<-merge(UrbRurCalc, UrbRurCalc90, by="UR6_2013_2014")
###############
UrbRurCalc$UrbRurcat[UrbRurCalc[,5]>=(UrbRurCalc$UR6_2013_2014mean-0.2*UrbRurCalc$UR6_2013_2014mean) & UrbRurCalc[,5]<=UrbRurCalc$UR6_2013_2014mean+(0.15*UrbRurCalc$UR6_2013_2014mean)]<-4
UrbRurCalc2<-subset(UrbRurCalc, UrbRurCalc[,5]<(UrbRurCalc$UR6_2013_2014mean-0.2*UrbRurCalc$UR6_2013_2014mean))
breaks5<-unique(quantile(UrbRurCalc2[,5], probs=0:3/3))
UrbRurCalc$UrbRurcat2<-ifelse(UrbRurCalc[,5]<(UrbRurCalc$UR6_2013_2014mean-0.2*UrbRurCalc$UR6_2013_2014mean), cut(UrbRurCalc[,5], unique(breaks5), include.lowest=TRUE, labels=FALSE), NA)
UrbRurCalc3<-subset(UrbRurCalc, UrbRurCalc[,5]>UrbRurCalc$UR6_2013_2014mean+(0.15*UrbRurCalc$UR6_2013_2014mean))
breaks6<-unique(quantile(UrbRurCalc3[,5], probs=0:3/3))
UrbRurCalc$UrbRurcat3<-ifelse(UrbRurCalc[,5]>UrbRurCalc$UR6_2013_2014mean+(0.15*UrbRurCalc$UR6_2013_2014mean), cut(UrbRurCalc[,5], unique(breaks6), include.lowest=TRUE, labels=FALSE), NA)
UrbRurCalc$UrbRurcat3[UrbRurCalc$UrbRurcat3==1]<-5
UrbRurCalc$UrbRurcat3[UrbRurCalc$UrbRurcat3==2]<-6
UrbRurCalc$UrbRurcat3[UrbRurCalc$UrbRurcat3==3]<-7
UrbRurCalc$UrbRurcat4<-paste(UrbRurCalc$UrbRurcat, UrbRurCalc$UrbRurcat2, UrbRurCalc$UrbRurcat3)
UrbRurCalc$UrbRurcat4<-trimws(UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-sub("NA NA", "", UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-sub(" NA", "", UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-sub("NA ", "", UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-trimws(UrbRurCalc$UrbRurcat4)
UrbRurCalc$UrbRurcat4<-as.numeric(UrbRurCalc$UrbRurcat4)
UrbRurCalcAdd<-subset(UrbRurCalc, select=c("CODE", "UrbRurcat4", "UR6_2013_2014mean", "UR6_2013_201490", "UR6_2013_2014"))
Datazone<-merge(Datazone, UrbRurCalcAdd,by.x="code", by.y="CODE")
###################################################################################################################
######################   SIMD
add4<-read.csv(paste0("data/SIMD.csv"))
SIMD<-merge(add, add4, by.x="CODE", by.y="Data_Zone")
SIMD$SIMDrank5<-as.numeric(quantcut(as.numeric(SIMD$Income_domain_2016_rank), 5))
SIMDmean <-aggregate(SIMD[,3], by=list(SIMD$SIMDrank5), FUN=mean, na.rm=TRUE)
names(SIMDmean)<-c("SIMDrank5", "SIMDmean")
SIMDCalc<-merge(SIMDmean, SIMD, by="SIMDrank5")
SIMDCalc90<-aggregate(SIMD[,3], by = list(SIMD$SIMDrank5), FUN = function(x) quantile(x, probs = 0.90))
names(SIMDCalc90)<-c("SIMDrank5", "SIMD90")
SIMDCalc<-merge(SIMDCalc, SIMDCalc90, by="SIMDrank5")
SIMDCalc$SIMDcat[SIMDCalc[,5]>=(SIMDCalc$SIMDmean-0.2*SIMDCalc$SIMDmean) & SIMDCalc[,5]<=SIMDCalc$SIMDmean+(0.15*SIMDCalc$SIMDmean)]<-4
SIMDCalc2<-subset(SIMDCalc, SIMDCalc[,5]<(SIMDCalc$SIMDmean-0.2*SIMDCalc$SIMDmean))
breaks5<-unique(quantile(SIMDCalc2[,5], probs=0:3/3))
SIMDCalc$SIMDcat2<-ifelse(SIMDCalc[,5]<(SIMDCalc$SIMDmean-0.2*SIMDCalc$SIMDmean), cut(SIMDCalc[,5], unique(breaks5), include.lowest=TRUE, labels=FALSE), NA)
SIMDCalc3<-subset(SIMDCalc, SIMDCalc[,5]>SIMDCalc$SIMDmean+(0.15*SIMDCalc$SIMDmean))
breaks6<-unique(quantile(SIMDCalc3[,5], probs=0:3/3))
SIMDCalc$SIMDcat3<-ifelse(SIMDCalc[,5]>SIMDCalc$SIMDmean+(0.15*SIMDCalc$SIMDmean), cut(SIMDCalc[,5], unique(breaks6), include.lowest=TRUE, labels=FALSE), NA)
SIMDCalc$SIMDcat3[SIMDCalc$SIMDcat3==1]<-5
SIMDCalc$SIMDcat3[SIMDCalc$SIMDcat3==2]<-6
SIMDCalc$SIMDcat3[SIMDCalc$SIMDcat3==3]<-7
SIMDCalc$SIMDcat4<-paste(SIMDCalc$SIMDcat, SIMDCalc$SIMDcat2, SIMDCalc$SIMDcat3)
SIMDCalc$SIMDcat4<-trimws(SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-sub("NA NA", "", SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-sub(" NA", "", SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-sub("NA ", "", SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-trimws(SIMDCalc$SIMDcat4)
SIMDCalc$SIMDcat4<-as.numeric(SIMDCalc$SIMDcat4)
SIMDCalcAdd<-subset(SIMDCalc, select=c("CODE", "SIMDcat4", "SIMDmean", "SIMD90", "SIMDrank5"))
Datazone<-merge(Datazone, SIMDCalcAdd,by.x="code", by.y="CODE")
############################# have to make the categories for LA AVERAGE #############################
LAmean<-mean(Datazone@data[,16])
LA90th<-quantile(Datazone@data[,16], c(.90))
# have to make the categories
Datazone@data$LAcat[Datazone@data[,16]>=(LAmean-0.2*LAmean) & Datazone@data[,16]<=LAmean+(0.15*LAmean)]<-4
Datazone2<-subset(Datazone, Datazone@data[,16]<(LAmean-0.2*LAmean))
breaks3<-unique(quantile(Datazone2@data[,16], probs=0:3/3))
if (length(breaks3)>1 ){
Datazone@data$LAcat2<-ifelse(Datazone@data[,16]<(LAmean-0.2*LAmean), cut(Datazone@data[,16], unique(breaks3), include.lowest=TRUE, labels=FALSE), NA)
} else {
Datazone@data$LAcat2[Datazone@data[,16]<(LAmean-0.2*LAmean)]<-1
}
Datazone3<-subset(Datazone, Datazone@data[,16]>LAmean+(0.15*LAmean))
breaks4<-unique(quantile(Datazone3@data[,16], probs=0:3/3))
if (length(breaks4)>1){
Datazone@data$LAcat3<-ifelse(Datazone@data[,16]>LAmean+(0.15*LAmean), cut(Datazone@data[,16], unique(breaks4), include.lowest=TRUE, labels=FALSE), NA)
} else {   Datazone@data$LAcat3<-1
}
Datazone@data$LAcat3[Datazone@data$LAcat3==1]<-5
Datazone@data$LAcat3[Datazone@data$LAcat3==2]<-6
Datazone@data$LAcat3[Datazone@data$LAcat3==3]<-7
Datazone@data$LAcat4<-paste(Datazone@data$LAcat, Datazone@data$LAcat2, Datazone@data$LAcat3)
Datazone@data$LAcat4<-trimws(Datazone@data$LAcat4)
Datazone@data$LAcat4<-sub("NA NA", "", Datazone@data$LAcat4)
Datazone@data$LAcat4<-sub(" NA", "", Datazone@data$LAcat4)
Datazone@data$LAcat4<-sub("NA ", "", Datazone@data$LAcat4)
Datazone@data$LAcat4<-trimws(Datazone@data$LAcat4)
Datazone@data$LAcat4<-as.numeric(Datazone@data$LAcat4)
###################################################################################################################
################## Hospital Admissions
HospAdd<-read.csv(paste0("data/Hosp.csv"))
Datazone<-merge(Datazone, HospAdd,by="code")
Datazone
Datazone@data
Datatypechoice<-""alcoholOff","
Datatypechoice<-""alcoholOff"
Datatypechoice<-"alcoholOff"
Datatypechoice[Datatypechoice=="alcoholoff"]<-"Alcohol Off Sales"
Datatypechoice
Datatypechoice[Datatypechoice="alcoholoff"]<-"Alcohol Off Sales"
Datatypechoice
Datatypechoice<-"alcoholOff"
Datatypechoice[Datatypechoice[1=="alcoholoff"]<-"Alcohol Off Sales"
Datatypechoice[Datatypechoice[1=="alcoholoff"]<-"Alcohol Off Sales" _
Datatypechoice[Datatypechoice[1]=="alcoholoff"]<-"Alcohol Off Sales" _
Datatypechoice[Datatypechoice[1]=="alcoholoff"]<-"Alcohol Off Sales"
Datatypechoice
Datatypechoice[Datatypechoice[1,]=="alcoholoff"]<-"Alcohol Off Sales"
typeof(Datatypechoice)
sub("alcoholoff", "Alcohol Off Sales", Datatypechoice)
Datatypechoice2<-sub("alcoholoff", "Alcohol Off Sales", Datatypechoice)
Datatypechoice2
Datatypechoice
sub("alcoholoff", "Alcohol Off Sales", Datatypechoice)
sub("alcoholoff", "Alcohol Off Sales", Datatypechoice[1])
sub("alcoholoff", "Alcohol Off Sales", Datatypechoice[])
sub("alcoholoff", "Alcohol Off Sales", Datatypechoice)
Datatypechoice
sub("alcoholOff", "Alcohol Off Sales", Datatypechoice)
substr(Datatypechoice,1,7)
Datatypechoice
Datatypechoice2
names(HospAdd)
HospAdd<-read.csv(paste0("data/Hosp.csv"))
HospAdd
add4<-read.csv(paste0("data/SIMD.csv"))
SIMDHosp<-merge(HospAdd, add4, by.x="code", by.y="Data_Zone")
SIMDHosp
head(SIMDHosp)
SIMDHosp$SIMDrank5<-as.numeric(quantcut(as.numeric(SIMDHosp$Income_domain_2016_rank), 5))
DepHospmean<-aggregate(SIMDHosp[,3], by=list(SIMDHosp$SIMDrank5), FUN=mean, na.rm=TRUE)
name(SIMDHosp)
names(SIMDHosp)
DepHospmean<-aggregate(SIMDHosp[,4], by=list(SIMDHosp$SIMDrank5), FUN=mean, na.rm=TRUE)
DepHospmean<-aggregate(SIMDHosp$ALCOHOL, by=list(SIMDHosp$SIMDrank5), FUN=mean, na.rm=TRUE)
DepHospmean
SIMDHosp$ALCOHOL
DepHospmean<-aggregate(as.numeric(SIMDHosp$ALCOHOL), by=list(SIMDHosp$SIMDrank5), FUN=mean, na.rm=TRUE)
DepHospmean
DepHospmean<-aggregate(as.character(as.numeric(SIMDHosp$ALCOHOL)), by=list(SIMDHosp$SIMDrank5), FUN=mean, na.rm=TRUE)
DepHospmean<-aggregate(as.numeric(as.character(SIMDHosp$ALCOHOL)), by=list(SIMDHosp$SIMDrank5), FUN=mean, na.rm=TRUE)
names(SIMDHosp)
ScottishHospmean<-mean(HospAdd$ALCOHOL)
names(datazone)
names(Datazone)
HospAdd<-read.csv(paste0("data/Hosp.csv"))
names(HospAdd)
Datazone<-merge(Datazone, HospAdd,by="code")
names(Datazone)
LAHospmean<-mean(Datazone@data$ALCOHOL)
LAHospmean<-mean(as.numeric(Datazone@data$ALCOHOL))
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
add2<-read.csv(paste0("data/urbanrural.csv"))
UrbRur<-merge(add, add2, by.x="CODE", by.y="Datazone2011")
add<-read.csv(paste0("data/output/",data))
add<-read.csv(paste0("data/output/800alcoholTOTAL2016.csv"))
UrbRur<-merge(add, add2, by.x="CODE", by.y="Datazone2011")
names(add)
names(add2)
runApp()
add2<-read.csv(paste0("data/urbanrural.csv"))
names(add2)
runApp()
add2<-read.csv(paste0("data/urbanrural.csv"))
add2$Datazone2011<-add2[1,]
add2$Datazone2011<-add2[,1]
names(add2)
UrbRur<-merge(add, add2, by.x="CODE", by.y="ï..Datazone2011")
runApp()
runApp()
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
add2<-read.csv(paste0("data/urbanrural.csv"))
add2<-read.csv(paste0("data/urbanrural.csv"))
names(add2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Z:/CRESH_MC/CRESHMAP/app/webmap')
runApp()
runApp()
runApp()
add2<-read.csv(paste0("data/urbanrural.csv"))
names(add2)
runApp()
